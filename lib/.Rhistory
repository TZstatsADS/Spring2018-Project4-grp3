prediction
load("ms_test_wide.RData")
data <- test
gamma_array <- trained.cluster.model$gamma_array
mu <- trained.cluster.model$mu
pi_mat <- trained.cluster.model$pi_mat
# Initiate parameters
data[is.na(data)] <- 0
user <- data$user
data <- data[,-1]
items_test <- names(data)
items_test_index <- match(items_test, list_of_items)
num_of_users <- nrow(data)
prediction <- matrix(NA, nrow = num_of_users, ncol = length(items_test))
names(prediction) <- items_test
data <- as.matrix(data)
# Assign users to cluster and make prediction
user.cluster <- apply(pi_mat, 1, which.max)
for (i in 1:num_of_users) {
cluster <- user.cluster[i]
for (j in 1:ncol(prediction)) {
index <- items_test_index[j]
prediction[i, j] <- as.numeric(which.max(gamma_array[,index,cluster])-1)
}
}
dim(data)
dim(prediction)
prediction
prediction
items_test
dim(prediction)
prediction
data
data <- test
data
# Initiate parameters
data[is.na(data)] <- 0
user <- data$user
data <- data[,-1]
items_test <- names(data)
items_test_index <- match(items_test, list_of_items)
num_of_users <- nrow(data)
prediction <- as.data.frame(matrix(0, nrow = num_of_users, ncol = length(items_test)))
names(prediction) <- items_test
data <- as.matrix(data)
# Assign users to cluster and make prediction
user.cluster <- apply(pi_mat, 1, which.max)
for (i in 1:num_of_users) {
cluster <- user.cluster[i]
for (j in 1:ncol(prediction)) {
index <- items_test_index[j]
prediction[i, j] <- as.numeric(which.max(gamma_array[,index,cluster])-1)
}
}
dim(data)
dim(prediction)
prediction
r=1
sorted_pred <- sort(prediction[r,], decreasing = T)
data[r,][names(sorted_pred)]
sorted_data <- unlist(data[r,][names(sorted_pred)])
sorted_data
data[r,]
names(sorted_pred)
data[r,][names(sorted_pred)]
names(sorted_pred)
data[r,][names(sorted_pred)]
# calculate the rank score
ranked_mat <- matrix(NA, nrow = nrow(data), ncol = ncol(data))
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
rownames(ranked_mat) <- rownames(data)
dim(ranked_mat)
dim(data)
unique(ranked_mat)
unique(unlist(ranked_mat))
data
# calculate the rank score
ranked_mat <- matrix(NA, nrow = nrow(data), ncol = ncol(data))
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
rownames(ranked_mat) <- rownames(data)
alpha <- 5
alpha <- 5
denom_vec <- 2^(0:(ncol(data)-1)/(alpha-1))
denom_mat <- matrix(rep(denom_vec, nrow(data)), nrow(data), ncol(data), byrow=T)
utility_matrix = ranked_mat/denom_mat
r_a_vector = rowSums(utility_matrix)
max_numerator_matrix = t(apply(data, 1, sort,decreasing=T))
max_utility_matrix = max_numerator_matrix/denom_mat
max_r_a_vector = rowSums(max_utility_matrix)
r = 100 * sum(r_a_vector)/sum(max_r_a_vector)
r
#####################################
d <- 0 #Neutral vote
C <- c(dim(gamma_array)[3])
alpha <- 5
gamma_array_test <- gamma_array[, items_test_index,]
recommendations <- matrix(NA, nrow = C, ncol = alpha)
votes <- matrix(NA, nrow = C, ncol = alpha)
for(ce in 1:C){
recommendations[ce,] <- order(gamma_array_test[,,ce][2,], decreasing = T)[1:alpha]
a <- recommendations[ce,]
votes[ce,] <- (gamma_array_test[,,ce][2,])[a]
}
rm(a)
votes[votes >= 0.5] <- 1
votes[votes < 0.5] <- 0
ra <- matrix(NA, nrow = nrow(prediction), ncol = 2)
names(ra) <- c("Ra", "Ra.max")
for(i in 1:nrow(prediction)){
cluster <- user.cluster[i]
jay <- 1:alpha
ra[i,1] <- sum(apply(data[i, recommendations[cluster,]], 2, max, 0)/(2^((jay-1)/(alpha-1))))
a <- min(sum(datat[i,]), alpha)
jay2 <- 1:a
ra[i,2] <- sum(rep(1, a)/(2^((jay2-1)/(alpha-1))))
}
user.cluster
for(i in 1:nrow(prediction)){
cluster <- user.cluster[i]
jay <- 1:alpha
ra[i,1] <- sum(apply(data[i, recommendations[cluster,]], 2, max, 0)/(2^((jay-1)/(alpha-1))))
a <- min(sum(datat[i,]), alpha)
jay2 <- 1:a
ra[i,2] <- sum(rep(1, a)/(2^((jay2-1)/(alpha-1))))
}
a <- c(NA, 1)
b <- c(1,2)
a+b
a <- c(NA, 1)
b <- c(1,2)
sum(a,b)
sum(a+b, na.rm = T)
test.cluster.model <- function(data, gamma_array, mu, pi_mat, list_of_items){
# Debug
# load("ms_test_wide.RData")
# data <- test
# gamma_array <- trained.cluster.model$gamma_array
# mu <- trained.cluster.model$mu
# pi_mat <- trained.cluster.model$pi_mat
# Initiate parameters
data[is.na(data)] <- 0
user <- data$user
data <- data[,-1]
items_test <- names(data)
items_test_index <- match(items_test, list_of_items)
num_of_users <- nrow(data)
prediction <- as.data.frame(matrix(0, nrow = num_of_users, ncol = length(items_test)))
names(prediction) <- items_test
data <- as.matrix(data)
# Assign users to cluster and make prediction
user.cluster <- apply(pi_mat, 1, which.max)
for (i in 1:num_of_users) {
cluster <- user.cluster[i]
for (j in 1:ncol(prediction)) {
index <- items_test_index[j]
prediction[i, j] <- as.numeric(which.max(gamma_array[,index,cluster])-1)
}
}
# calculate the rank score
ranked_mat <- matrix(NA, nrow = nrow(data), ncol = ncol(data))
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
rownames(ranked_mat) <- rownames(data)
alpha <- 5
denom_vec <- 2^(0:(ncol(data)-1)/(alpha-1))
denom_mat <- matrix(rep(denom_vec, nrow(data)), nrow(data), ncol(data), byrow=T)
utility_matrix = ranked_mat/denom_mat
r_a_vector = rowSums(utility_matrix)
max_numerator_matrix = t(apply(data, 1, sort,decreasing=T))
max_utility_matrix = max_numerator_matrix/denom_mat
max_r_a_vector = rowSums(max_utility_matrix)
r = 100 * sum(r_a_vector)/sum(max_r_a_vector)
return(list("prediction"=prediction, "r"=r))
}
list_of_items <- names(train[,-1])
list_of_items
load("ms_train_wide.RData")
# system.time(trained.cluster.model <- train.cluster.model(train, C = 4))
list_of_items <- names(train[,-1])
load("ms_test_wide.RData")
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
save(t, file = "../output/cv_cluster_rank_score.Rdata")
write.csv(t, file = "../output/cv_cluster_rank_score.csv")
print(t)
best.C <- which.max(r) + 1
best.C
}
load("ms_train_wide.RData")
load("ms_test_wide.RData")
# system.time(trained.cluster.model <- train.cluster.model(train, C = 4))
list_of_items <- names(train[,-1])
cross.validate.model.clustering <- T
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
save(t, file = "../output/cv_cluster_rank_score.Rdata")
write.csv(t, file = "../output/cv_cluster_rank_score.csv")
print(t)
best.C <- which.max(r) + 1
best.C
}
knitr::opts_chunk$set(echo = TRUE)
preprocess.train <- F
if (preprocess.train){
library(data.table)
data <- fread("../data/data_sample/MS_sample/data_train.csv")
data <- data[,-1]
data$V3 <- as.numeric(data$V3)
userid <- 0
for (i in 1:nrow(data)) {
if(data[i,]$V1 == "C"){
userid <- data[i,]$V2
}
else{
data[i,]$V3 <- userid
}
print(i)
}
data <- data[data$V1=="V",]
data <- data[,-1]
train <- data
colnames(train) <- c("item", "user")
train$rate <- 1
save(train, file = "ms_narrow.RData")
}
preprocess.test <- F
if (preprocess.test){
data <- fread("../data/data_sample/MS_sample/data_test.csv")
data <- data[,-1]
data$V3 <- as.numeric(data$V3)
userid <- 0
for (i in 1:nrow(data)) {
if(data[i,]$V1 == "C"){
userid <- data[i,]$V2
}
else{
data[i,]$V3 <- userid
}
print(i)
}
data <- data[data$V1=="V",]
data <- data[,-1]
test <- data
colnames(test) <- c("item", "user")
test$rate <- 1
save(test, file = "ms_test_narrow.RData")
}
reshape.train <- F
if(reshape.train){
load("ms_narrow.RData")
train <- reshape(train,
v.names = "rate",
direction = "wide",
idvar = "user",
timevar = "item")
save(train, file = "ms_train_wide.RData")
}
reshape.test <- F
if(reshape.test){
load("ms_test_narrow.RData")
test <- reshape(test,
v.names = "rate",
direction = "wide",
idvar = "user",
timevar = "item")
save(train, file = "ms_test_wide.RData")
}
train.cluster.model<- function(data, C, iterations=50){
# data <- train
# C=4
# set up
data[is.na(data)] <- 0
user <- data$user
list_of_users<- unique(data$user)
data <- data[,-1] #delete the user column
k <- c(0, 1) # different rating
num_of_users<- nrow(data)
num_of_items<- ncol(data)
list_of_items<- names(data)
data <- as.matrix(data)
# Initialize parameters
mu<- sample(c(1/100:10/100), C, replace = T)
mu<- mu/sum(mu)
gamma_array<- array(sample(c(1/100:10/100), 2*num_of_items*C, replace = T), dim=c(2, num_of_items, C))
for(d in 1:C){
col_sum <- colSums(gamma_array[, , d])
for (row in 1:nrow(gamma_array[, , d])) {
gamma_array[row,,d] <- gamma_array[row,,d]/col_sum
}
}
pi_mat<- matrix(0, nrow=num_of_users, ncol=C)
# pi_mat_old<- matrix(0, nrow=num_of_users, ncol=C)
phi <- matrix(NA, nrow = num_of_users, ncol = C)
print("Initialization is done!")
for(iter in 1:iterations){
pi_mat_old<- pi_mat
# E-step
## Update pi_mat
for (i in 1:num_of_users){
log_fi_prod<- rep(0, C)
for(j in 1:num_of_items){
log_fi_prod <- log_fi_prod +
log(gamma_array[data[i,j] + 1, j,])
}
phi[i, ] <- exp(log_fi_prod)
}
for (row in 1:nrow(phi)) {
phi[row,] <- phi[row,]*mu
}
row.sum <- rowSums(phi)
for (col in 1:ncol(phi)) {
phi[,col] <- phi[,col]/row.sum
}
pi_mat <- phi
print(paste(iter, "E-step done!"))
# M-step
## Update mu
mu<- apply(pi_mat, 2, mean)/num_of_users
## Update gamma_array
for(c in 1:C){
for(j in 1:num_of_items){
l <- t(pi_mat[, c]) %*% data[, j]
gamma_array[2, j, c] <- l/sum(pi_mat[ ,c])
gamma_array[1, j, c] <- 1 - gamma_array[2, j, c]
}
}
print(paste(iter, "M-step done!"))
print(paste("Iteration", iter, "done!"))
print(norm(pi_mat - pi_mat_old))
if(norm(pi_mat - pi_mat_old) <= 0.1){
break()
}
}
return(list("mu"=mu, "gamma_array"=gamma_array, "pi_mat"=pi_mat))
}
test.cluster.model <- function(data, gamma_array, mu, pi_mat, list_of_items){
# Debug
# load("ms_test_wide.RData")
# data <- test
# gamma_array <- trained.cluster.model$gamma_array
# mu <- trained.cluster.model$mu
# pi_mat <- trained.cluster.model$pi_mat
# Initiate parameters
data[is.na(data)] <- 0
user <- data$user
data <- data[,-1]
items_test <- names(data)
items_test_index <- match(items_test, list_of_items)
num_of_users <- nrow(data)
prediction <- as.data.frame(matrix(0, nrow = num_of_users, ncol = length(items_test)))
names(prediction) <- items_test
data <- as.matrix(data)
# Assign users to cluster and make prediction
user.cluster <- apply(pi_mat, 1, which.max)
for (i in 1:num_of_users) {
cluster <- user.cluster[i]
for (j in 1:ncol(prediction)) {
index <- items_test_index[j]
prediction[i, j] <- as.numeric(which.max(gamma_array[,index,cluster])-1)
}
}
# calculate the rank score
ranked_mat <- matrix(NA, nrow = nrow(data), ncol = ncol(data))
for (r in 1:nrow(ranked_mat)) {
sorted_pred <- sort(prediction[r,], decreasing = T)
sorted_data <- unlist(data[r,][names(sorted_pred)])
ranked_mat[r,] <- unname(sorted_data)
}
rownames(ranked_mat) <- rownames(data)
alpha <- 5
denom_vec <- 2^(0:(ncol(data)-1)/(alpha-1))
denom_mat <- matrix(rep(denom_vec, nrow(data)), nrow(data), ncol(data), byrow=T)
utility_matrix = ranked_mat/denom_mat
r_a_vector = rowSums(utility_matrix)
max_numerator_matrix = t(apply(data, 1, sort,decreasing=T))
max_utility_matrix = max_numerator_matrix/denom_mat
max_r_a_vector = rowSums(max_utility_matrix)
r = 100 * sum(r_a_vector)/sum(max_r_a_vector)
return(list("prediction"=prediction, "r"=r))
}
load("ms_train_wide.RData")
load("ms_test_wide.RData")
# system.time(trained.cluster.model <- train.cluster.model(train, C = 4))
list_of_items <- names(train[,-1])
cross.validate.model.clustering <- T
if(cross.validate.model.clustering){
r <- c()
parameters <- c(4,5,6)
for(par in parameters){
trained.cluster.model <- train.cluster.model(train, C = par)
g <- trained.cluster.model$gamma_array
m <- trained.cluster.model$mu
p <- trained.cluster.model$pi_mat
testing <- test.cluster.model(test, gamma_array = g, mu = m, pi_mat = p, list_of_items = list_of_items)
r <- c(r, testing$r)
print(paste("For number of clusters equal to:", par, "Rank score:", testing$r))
}
t <- matrix(NA, ncol = length(parameters), nrow = 2)
t[1,] <- parameters
t[2,] <- r
save(t, file = "../output/cv_cluster_rank_score.Rdata")
write.csv(t, file = "../output/cv_cluster_rank_score.csv")
print(t)
best.C <- which.max(r) + 1
best.C
}
best.C
load("../data/data_sample/MS_samle/data_test1.RData")
load("../data/data_sample/MS_sample/data_test1.RData")
dim(ms_test1)
load("../data/data_sample/MS_sample/data_train1.RData")
dim(ms_train1)
load("../data/data_sample/MS_sample/data_test1.RData")
dim(ms_test1)
load("../data/data_sample/MS_sample/data_train1.RData")
ms_train1
ms_train1[1:5,1:5]
names(ms_test1)
colnames(ms_test1)
match(colnames(ms_test1),colnames(ms_train1))
load("../data/data_sample/MS_sample/data_train1.RData")
load("../data/data_sample/MS_sample/data_test1.RData")
source("../lib/select_neighbor.R")
getwd()
source("select_neighbor.R")
setwd("~/Documents/GitHub/Spring2018-Project4-grp3/lib")
source("../lib/select_neighbor.R")
source("../lib/select_neighbor.R")
load("ms_vec_train.Rdata")
load("../output/ms_vec_train.Rdata")
dim(ns_vec_train)
dim(ms_vec_train)
ms_vec_train[1:5, 1:5]
test1 <- select_neighbor(userid = 10019, ms_vec_train, para = list(n = 7))
test1 <- select_neighbor(userid = 10019, ms_vec_train, para = list(threshold = 30, n = 7))
test1 <- select_neighbor(userid = "10019", ms_vec_train,
para = list(threshold = 30, n = 7))
test1 <- select_neighbor(userid = "10019", ms_vec_train)
rownames(ms_vec_train) <- colnames(ms_vec_train)
test1 <- select_neighbor(userid = "10019", ms_vec_train)
ms_vec_train[1:5, 1:5]
0.003/5
0.008/5
estimate <- rep(0,5)
variance <- rep(0,5)
for (i in 1:5){
U <- runif(200,min=0+0.2*(i-1),max=0.2*i)
X <- qnorm(pnorm(1)+U*(1-pnorm(1)))
estimate[i]<- mean((X^2)*(1-pnorm(1)))
variance[i]<- var((X^2)*(1-pnorm(1)))
}
esti <-mean(estimate)
esti
simvar<-sum(variance/200)
simvar
sqrt(simvar)
estimate <- rep(0,5)
sd <- rep(0,5)
for (i in 1:5){
U <- runif(200,min=0+0.2*(i-1),max=0.2*i)
X <- qnorm(pnorm(1)+U*(1-pnorm(1)))
estimate[i]<- mean((X^2)*(1-pnorm(1)))
sd[i]<- sd((X^2)*(1-pnorm(1)))
}
sum(sd/sqrt(200))
